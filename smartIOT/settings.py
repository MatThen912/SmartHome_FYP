"""
Django settings for smartIOT project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from django.contrib.messages import constants as messages
from pathlib import Path
import os
from datetime import timedelta
import environ
from django.urls import reverse_lazy

# Initialise environment variables
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = '12312312)&*(TPHJVSAD)^*RFPUASHDV)PJH'

DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '20.212.164.8',
    '20.212.106.201',
    '*',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django_user_agents',
    'django.contrib.staticfiles',
    'django_filters',
    'crispy_forms',
    'django_crontab',
    'mathfilters',
    'rest_framework',
    'corsheaders',
    'accounts',
    'smartIOT',
    'logbook',
    'two_factor',
    'device',
    'devices',
    'user_sessions',
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_email',

]

CRONJOBS = [
    ('1 0 * * *', 'django.core.management.call_command',
     ['update_doc']),  # Run every 00:01
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'account_id',
    'USER_ID_CLAIM': 'account_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'user_sessions.middleware.SessionMiddleware',
    "django.middleware.common.CommonMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware', 
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.OneSessionPerUserMiddleware',

    'django_user_agents.middleware.UserAgentMiddleware',
    'two_factor.middleware.threadlocals.ThreadLocals'
]

LOGIN_URL = 'two_factor:login'
LOGIN_REDIRECT_URL = 'device/dashboard'
ROOT_URLCONF = 'smartIOT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartIOT.wsgi.application'
# django form template
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Database

"""
PLEASE READ THIS
this method is to easier switch between different database
1 = Local Host Sqlite database
2 = Production Postgres Database
3 = Dev Postgres Database (Sandbox database)
"""

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': str(os.path.join(BASE_DIR, "db.sqlite3"))
        }
}


# Password validation
AUTH_USER_MODEL = 'accounts.Account'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kuala_Lumpur'

USE_I18N = True

USE_L10N = True

USE_TZ = False

#This explicitly sets the XML parser to Django's safe parser.
XML_PARSER = 'django.utils.xmlutils.SafestXMLParser'


# Static
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Images related
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = '/static/'




CORS_ALLOW_ALL_ORIGIN = True
SESSION_COOKIE_AGE = 3600 * 24 * 14  # 2 weeks cookie
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session Expire on browser close
SESSION_ENGINE = 'user_sessions.backends.db'



TWO_FACTOR_REMEMBER_COOKIE_AGE = 120  # Set to 2 minute for testing

TWO_FACTOR_WEBAUTHN_RP_NAME = 'Demo Application'

# Configuration for mustauthentcated middleware
# IGNORE_LOGIN_PATTERNS = r'(^api)([0-9a-zA-Z\-]*)(\/)[0-9a-zA-Z\-]?' #  Ignore everying begins with api
IGNORE_LOGIN_PATTERNS = (
    r'^(/)(api)',
    r'^(/)(reset)',
)